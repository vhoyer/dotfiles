[user]
	name = VinÃ­cius Hoyer
	email = contact@vhoyer.dev
	signingkey = contact@vhoyer.dev
[init]
	defaultBranch = main
[core]
	autocrlf = input
	safecrlf = warn
	editor = $EDITOR
	# this file is symbolic linked to ./global_gitignore by `../Makefile`
	excludesfile = ~/.global_gitignore
[alias]
	#
	# functions
	#
	revert-menu = "!revertMenu() {\
		file='/tmp/revert-menu' \
		&& echo '# lines prepended with an \"k\" are keept while with an \"r\" are reverted' >$file \
		&& git log --oneline --max-count=${1:-20} --format=format:'%h %s' | sed -e 's/^/k /' >>$file \
		&& $EDITOR $file +':setfiletype RevertMenu' \
		&& sed -e '/^#/d' -e '/^k/d' -e 's/r \\(\\w\\+\\).*/\\1/' -in $file \
		&& xargs -I{} sh -c 'git revert {} && git commit --amend -m\":rewind: $(git show --format=%B --quiet)\"' <$file;\
		}; revertMenu"
	master-update = "!gitmup() {\
		git checkout ${1:-$(git config --get init.defaultBranch)} \
		&& git pull; \
		git checkout -;\
		}; gitmup"
	homolog-push = "!homologPush() {\
		git checkout homolog;\
		git fetch --prune;\
		git reset --hard @{u};\
		git merge - --no-edit && git push &&\
		git checkout -;\
		}; homologPush"
	prefix-it = "!gitsuffixit() { \
		[ $1 ] \
		&& git branch -m \"$1-$(git branch --show-current)\" \
		|| echo 'needs a suffix to append to branch name' && return 1;\
		}; gitsuffixit"
	suffix-it = "!gitsuffixit() { \
		[ $1 ] \
		&& git branch -m \"$(git branch --show-current)-$1\" \
		|| echo 'needs a suffix to append to branch name' && return 1;\
		}; gitsuffixit"
	clear-local-branches = "!clb() { \
		echo Executing 'it remote prune origin' \
		&& git remote prune origin \
		&& echo Finding merged branchs \
		&& echo '# Remove from the buffer the branches you want to keep' >/tmp/merged-branches \
		&& git branch --merged | grep \"master\\|next-release\\|$(git rev-parse --abbrev-ref HEAD)\\|$(git config --get init.defaultBranch)\" -v >>/tmp/merged-branches \
		&& $EDITOR /tmp/merged-branches +':setfiletype ClearLocalBranches' \
		&& sed -ine '/^#/d' /tmp/merged-branches \
		&& xargs git branch -d </tmp/merged-branches;\
		}; clb"
	pull-preview = "!gitpullpreview() { \
		echo Fetching new changes... \
		&& git fetch --prune \
		&& git log -p ...@{u};\
		}; gitpullpreview"
	pull-diff = "!gitpulldiff() { \
		echo Fetching new changes... \
		&& git fetch --prune \
		&& git diff ...@{u};\
		}; gitpulldiff"
	branch-rename = "!branchrename() { \
		git branch --show-current >/tmp/new-branch-name;\
		$EDITOR /tmp/new-branch-name;\
		</tmp/new-branch-name xargs -I{} git branch -m {};\
		}; branchrename"
	update-base = "!frmcc() { \
		git f && git rb && git merge - --no-edit || git ch --theirs . && git commit --no-edit; \
		}; frmcc"
	interactive-change-branch = "!interactivechangebranch(){ \
		git checkout \"$(\
			git branch -a --sort=-committerdate \
			| grep -v \"HEAD\\|\\<$(git branch --show-current)\\>\" \
			| uniq \
			| fzf\
			| sed -e 's/remotes\\/[^/]\\+\\/\\|\\s->.*$\\|^\\s\\+//g' \
			)\"; \
		}; interactivechangebranch"
	#
	# shorthands
	#
	mup = master-update
	pre = prefix-it
	suf = suffix-it
	clb = clear-local-branches
	pp = pull-preview
	pd = pull-diff
	ub = update-base
	cd = interactive-change-branch
	#
	# general
	#
	g = "!gitagain() { git \"$@\"; }; gitagain"
	ad = add -p
	ada = add -A
	dog = log --decorate --oneline --graph
	doguh = log --decorate --oneline --graph @{u} HEAD
	adog = log --all --decorate --oneline --graph
	ch = checkout
	co = commit
	cp = cherry-pick
	d = diff
	ds = diff --staged
	dword = diff --color-words='[^[:space:]]|([[:alnum:]]|UTF_8_GUARD)+'
	dchar = diff --color-words='.'
	f = fetch -p
	fix = "!nvim `git diff --name-only --diff-filter=U`"
	fuck = commit --amend
	hist = log --graph --decorate --pretty=oneline --abbrev-commit --all --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)'
	lop = log --decorate --pretty=oneline --abbrev-commit --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)'
	elog = "!gitelog() { git log $@ | gitmoji-log | bat --plain; }; gitelog"
	pow = push origin HEAD -u
	powf = push origin HEAD -u --force-with-lease
	s = status
	wp = rebase --continue
	back = checkout HEAD~
	next = "!git checkout $(git rev-list --topo-order HEAD..master | tail -1)"
	c = "!gitmoji -c"
	rb = reset --hard @{u}
[push]
	default = simple
[credetial]
	helper=store
[rerere]
	enabled = true
[pull]
	ff = only
[init]
	defaultBrnch = main
[commit]
	gpgsign = true
[tag]
	gpgSign = true
[rebase]
	updateRefs = true
	autoStash = true
	autoSquash = true
	stat = true
